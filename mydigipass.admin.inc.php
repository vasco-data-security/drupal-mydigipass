<?php

/**
 * @file
 * Administrative page callbacks for the mydigipass module.
 */

/**
 * Page callback for 'admin/settings/mydigipass' and for
 * 'admin/settings/mydigipass/account_settings'.
 *
 * Shows the admin form which allows to configure the mydigipass module.
 *
 * @see mydigipass_admin_settings_submit_test_connectivity()
 *
 * @return
 *   Admin form generated by system_settings_form().
 */
function mydigipass_admin_settings($form_state) {
  $form = array();

  $form['account_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Account settings'),
  );
  $form['account_settings']['mydigipass_environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => array('test' => t('Sandbox / developer'), 'production' => t('Production')),
    '#default_value' => variable_get('mydigipass_environment', ''),
    '#required' => TRUE,
  );
  $form['account_settings']['mydigipass_client_id'] = array(
    '#type' => 'textfield',
    '#title' => 'client_id',
    '#default_value' => variable_get('mydigipass_client_id', ''),
    '#description' => t('The client identifier issued by MYDIGIPASS.COM.'),
    '#required' => TRUE,
  );
  // If the client_secret has already been set, we don't show the textfield by
  // default. This is because it is a password field of which it is not possible
  // to set a default_value. In order to avoid accidental overwriting the
  // client_secret, we hide the input field.
  $client_secret = variable_get('mydigipass_client_secret', '');
  if (empty($client_secret) || ($_GET['edit_password'] == 1)) {
    $form['account_settings']['mydigipass_client_secret'] = array(
      '#type' => 'password',
      '#title' => 'client_secret',
      // For security reasons, the client_secret is never filled in. This is
      // also the default behaviour of a password-type form field.
      //'#default_value' => variable_get('mydigipass_client_secret', ''),
      '#description' => t('The client secret issued by MYDIGIPASS.COM.'),
      '#required' => TRUE,
    );
  }
  else {
    $form['account_settings'][] = array(
      '#type' => 'item',
      '#title' => 'client_secret',
      '#value' => t('Click <a href="@here">here</a> to edit the client_secret', array('@here' => url('admin/settings/mydigipass', array('query' => array('edit_password' => 1))))),
    );
  }


  $form['authentication_mode'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication mode'),
  );
  $form['authentication_mode']['mydigipass_authentication_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Choose authentication mode'),
    '#options' => array(
      'mdp_only' => t('MYDIGIPASS.COM only'),
      'mixed' => t('Mixed mode. The end-user can logon with both MYDIGIPASS.COM and with username/password.'),
    ),
    '#default_value' => variable_get('mydigipass_authentication_mode', 'mdp_only'),
    '#description' => t('The most secure authentication mode is <i>MYDIGIPASS.COM only</i>. In this mode, a user is forced to authenticate using two-factor authentication from MYDIGIPASS.COM once he/she has linked his/her Drupal account to MYDIGIPASS.COM. In <i>Mixed mode</i>, an end-user still can logon with username/password.<br />Note: users who can have not yet linked their account with a MYDIGIPASS.COM account are not affected by this setting.'),
    '#required' => TRUE,
  );

/*
  // Code which allows to set a proxy. Commented out since not yet supported
  // by the callback function.
  $form['connectivity_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Connectivity settings'),
  );
  $form['connectivity_settings']['mydigipass_proxy_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Proxy address'),
    '#default_value' => variable_get('mydigipass_proxy_address', ''),
  );
  $form['connectivity_settings']['mydigipass_proxy_port'] = array(
    '#type' => 'password',
    '#title' => t('Proxy port'),
    '#default_value' => variable_get('mydigipass_proxy_port', ''),
  );
 */

  $form['test_connectivity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test the connectivity to MYDIGIPASS.COM'),
    '#description' => t('By clicking this button you can test whether this webserver can connect to MYDIGIPASS.COM. In order to do this, it will make an outbound HTTPS connection.'),
  );
  $form['test_connectivity']['submit_test_connectivity'] = array(
    '#type' => 'submit',
    '#submit' => array('mydigipass_admin_settings_submit_test_connectivity'),
    '#value' => t('Test connectivity'),
  );

  return system_settings_form($form);
}

/**
 * Submit handler connected to the 'Test connectivity button' on
 * 'admin/settings/mydigipass' and
 * 'admin/settings/mydigipass/account_settings'.
 *
 * Tests whether the webserver is able to connect to the MYDIGIPASS.COM service.
 *
 * @return
 *   Admin form generated by system_settings_form().
 */
function mydigipass_admin_settings_submit_test_connectivity($form, &$form_state) {
  $url = 'https://www.mydigipass.com';
  if (in_array('curl', get_loaded_extensions())) {
    drupal_set_message(t("cURL is installed"));

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    $data = curl_exec($ch);
    $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    // Check the value of the returned HTTP Status Code
    if ($data === FALSE) {
      drupal_set_message(t('An error occured while executing the curl_exec to the token endpoint: the error was %error', array('%error' => curl_error($ch))), 'error');
    }
    elseif ($http_status == 200) {
      drupal_set_message(t('Connectivity test succeeded: this web server can contact MYDIGIPASS.COM.'));
    }
    else {
      drupal_set_message(t('An error occured while contacting %url: the HTTP status code was %http_status', array('%http_status' => $http_status, '%url' => $url)), 'error');
    }
  }
  elseif (function_exists('fsockopen') && in_array('openssl', get_loaded_extensions())) {
    drupal_set_message(t("cURL is NOT installed, but fsockopen exists and OpenSSL is installed"));
    $url = parse_url($url);
    $fp = fsockopen('ssl://' . $url['host'], 443, $err_num, $err_msg, 30);
    if ($fp === FALSE) {
      drupal_set_message(t('An error occured while opening a socket using fsockopen: the error was %error', array('%error' => $err_msg)), 'error');
    }
    else {
      $crlf = "\r\n";
      fputs($fp, 'GET /' . $url['path'] . (isset($url['query']) ? '?' . $url['query'] : '') . ' HTTP/1.0' . $crlf);
      fputs($fp, 'Host: ' . $url['host'] . $crlf);
      fputs($fp, 'User-Agent: MYDIGIPASS.COM Drupal module' . $crlf);
      fputs($fp, 'Connection: close'  . $crlf . $crlf);
      while (!feof($fp)) {
        $http_response .= fgets($fp, 128);
      }
      fclose($fp);
      // Extract the HTTP status code
      $arr_http_response = explode($crlf . $crlf, $http_response, 2);
      $http_status_array = explode(' ', $arr_http_response[0]);

      if ($http_status_array[1] == '200') {
        drupal_set_message(t('Connectivity test succeeded: this web server can contact MYDIGIPASS.COM.'));
      }
      else {
        drupal_set_message(t('An error occured while contacting %url: the HTTP status code was %http_status', array('%http_status' => $http_status_array[1], '%url' => $url)), 'error');
      }
    }
  }
  else {
    drupal_set_message(t('This PHP installation lacks the necessary functions to make outbound connections.'), 'error');
  }
}

/**
 * Page callback for 'admin/settings/mydigipass/user_profile_fiels'.
 *
 * Shows the admin form which allows the administrator to specify which attributes
 * are being displayed on a user's profile page.
 *
 * @see mydigipass_admin_settings_user_profile_fields_form_validate()
 * @see mydigipass_admin_settings_user_profile_fields_form_submit()
 */
function mydigipass_admin_settings_user_profile_fields_form($form_state) {
  $form = array();

  // Extract all available fields which are currently selected
  $sql = 'SELECT name FROM {mydigipass_profile_fields}';
  $result = db_query($sql);
  $selected_user_data_fields = array();
  while ($row = db_fetch_object($result)) {
    $selected_user_data_fields[] = $row->name;
  }

  // Extract all available fields which are currently available in the user_data column
  $sql = 'SELECT DISTINCT attribute_key FROM {mydigipass_user_data} WHERE attribute_key <> \'error\' ORDER BY attribute_key ASC';
  $result = db_query($sql);
  $all_user_data_fields = array();
  while ($row = db_fetch_object($result)) {
    $all_user_data_fields[$row->attribute_key] = $row->attribute_key;
  }

  $form['user_data_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available user data fields'),
    '#options' => $all_user_data_fields,
    '#default_value' => $selected_user_data_fields,
    '#description' => t("These fields are user attribute fields which have already been provided by MYDIGIPASS.COM. Select the fields of which you would like to display the values when displaying a user's profile."),
  );
  $form[] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Form submit handler for mydigipass_admin_settings_user_profile_fields_form().
 *
 * @see mydigipass_admin_settings_user_profile_fields_form_validate()
 */
function mydigipass_admin_settings_user_profile_fields_form_submit($form, &$form_state) {
  // Store the submitted form values in a variable.
  $user_data_fields = $form_state['values']['user_data_fields'];

  // A boolean via which we will track whether the database queries were succesfull.
  $success = TRUE;

  // Delete the previous stored setting.
  $sql = 'DELETE FROM {mydigipass_profile_fields}';
  db_query($sql);

  // Store the selected attribute names in the database.
  $sql = "INSERT INTO {mydigipass_profile_fields} VALUES ('%s')";

  foreach ($user_data_fields as $key => $value) {
    if ($key === $value) {
      $success &= db_query($sql, $value);
    }
  }
  if ($success) {
    drupal_set_message(t('The configuration options have been saved.'));
  }
  else {
    drupal_set_message(t('An error occured while saving the configuration options.'), 'error');
  }
}

/**
 * Page callback for 'admin/settings/mydigipass/button_style'.
 *
 * Shows the admin form which allows the administrator to select which
 * button has to be shown within the forms. The administrator can select the
 * layout of three buttons: the one shown on a typical login form, the one
 * shown on a register form and the one shown in the user profile which allows
 * to link to account with a MYDIGIPASS.COM account.
 *
 * @return
 *   Admin form generated by system_settings_form().
 */
function mydigipass_admin_settings_button_style_form($form_state) {
  $forms = array('login' => 'Login', 'register' => 'Register', 'link' => 'Link');
  $defaults = array(
    'login' => array('style' => 'default', 'text' => 'secure-login', 'help' => 'true'),
    'register' => array('style' => 'large', 'text' => 'sign-up', 'help' => 'true'),
    'link' => array('style' => 'large', 'text' => 'connect', 'help' => 'true'),
  );
  foreach ($forms as $key => $value) {
    $form[$key . '_form'] = array(
      '#type' => 'fieldset',
      '#title' => t(check_plain($value) . " form"),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Use the options below to modify the style of the MYDIGIPASS.COM button which is shown in the ' . check_plain($key) . ' form.'),
    );
    $form[$key . '_form']['mydigipass_' . $key . '_form_style'] = array(
      '#type' => 'radios',
      '#title' => t('Style'),
      '#options' => array('default' => 'default', 'large' => 'large', 'medium' => 'medium', 'small' => 'small', 'false' => 'false'),
      '#default_value' => variable_get('mydigipass_' . $key . '_form_style', $defaults[$key]['style']),
      '#required' => TRUE,
      '#description' => t("Sets the button style. Use false if you don't want to use the default MYDIGIPASS.COM Secure Login button styling."),
    );
    $form[$key . '_form']['mydigipass_' . $key . '_form_text'] = array(
      '#type' => 'radios',
      '#title' => t('Text'),
      '#options' => array('connect' => 'connect', 'sign-up' => 'sign-up', 'secure-login' => 'secure-login'),
      '#default_value' => variable_get('mydigipass_' . $key . '_form_text', $defaults[$key]['text']),
      '#required' => TRUE,
      '#description' => t("Specifies the text to appear on the button. Note that this attribute is irrelevant if the style attribute is set to default or small."),
    );
    $form[$key . '_form']['mydigipass_' . $key . '_form_help'] = array(
      '#type' => 'radios',
      '#title' => t('Help'),
      '#options' => array('true' => 'true', 'false' => 'false'),
      '#default_value' => variable_get('mydigipass_' . $key . '_form_help', $defaults[$key]['help']),
      '#required' => TRUE,
      '#description' => t("If set to true, meta-text is used to display information about the button in question."),
    );
  }

  return system_settings_form($form);
}
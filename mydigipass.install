<?php
/**
 * @file
 * Install, update, and uninstall functions for the mydigipass module.
 */

/**
 * Implements hook_requirements().
 */
function mydigipass_requirements($phase) {
  $requirements = array();
  $t = get_t();
  $title = $t('MYDIGIPASS.COM');

  switch ($phase) {
    case 'install':
    case 'runtime':
      if (function_exists('fsockopen') && in_array('openssl', get_loaded_extensions())) {
        $requirements['mydigipass'] = array(
          'title' => $title,
          'value' => $t('Functionality is available to make outbound connections.'),
          'severity' => REQUIREMENT_OK,
        );
      }
      else {
        $requirements['mydigipass'] = array(
          'title' => $title,
          'description' => $t('This PHP installation lacks the necessary functions to make outbound connections.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function mydigipass_install() {
  drupal_install_schema('mydigipass');
}

/**
 * Implements hook_uninstall().
 */
function mydigipass_uninstall() {
  // Remove the database tables.
  drupal_uninstall_schema('mydigipass');
  // Remove the different configuration settings.
  variable_del('mydigipass_environment');
  variable_del('mydigipass_client_id');
  variable_del('mydigipass_client_secret');
  variable_del('mydigipass_callback_url');
  variable_del('mydigipass_authentication_mode');
  variable_del('mydigipass_link_form_help');
  variable_del('mydigipass_link_form_style');
  variable_del('mydigipass_link_form_text');
  variable_del('mydigipass_login_form_help');
  variable_del('mydigipass_login_form_style');
  variable_del('mydigipass_login_form_text');
  variable_del('mydigipass_register_form_help');
  variable_del('mydigipass_register_form_style');
  variable_del('mydigipass_register_form_text');
}

/**
 * Implements hook_schema().
 */
function mydigipass_schema() {
  $schema['mydigipass_user_link'] = array(
    'description' => 'Stores the links between Drupal users and MYDIGIPASS.COM users.',
    'fields' => array(
      'drupal_uid' => array(
        'description' => 'Drupal user ID. See {users}.uid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mdp_uuid' => array(
        'description' => 'MYDIGIPASS.COM user ID. See {mydigipass_user_data}.mdp_uuid',
        'type' => 'varchar',
        'length' => '36',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('mdp_uuid'),
    'unique keys' => array(
      'drupal_uid' => array('drupal_uid'),
    ),
  );

  $schema['mydigipass_profile_fields'] = array(
    'description' => "Stores the attribute keys of which the values have to be shown in a user's profile.",
    'fields' => array(
      'name' => array(
        'description' => 'The attribute key.',
        'type' => 'varchar',
        'length' => '256',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['mydigipass_user_data'] = array(
    'description' => 'Stores the user attributes received from MYDIGIPASS.COM.',
    'fields' => array(
      'mdp_uuid' => array(
        'description' => 'MYDIGIPASS.COM user ID',
        'type' => 'varchar',
        'length' => '36',
        'not null' => TRUE,
      ),
      'attribute_key' => array(
        'description' => 'The attribute key.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'attribute_value' => array(
        'description' => 'The attribute value.',
        'type' => 'varchar',
        'length' => '1024',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('mdp_uuid', 'attribute_key'),
  );

  return $schema;
}

<?php
/**
 * @file
 * mydigipass provides authentication against the MYDIGIPASS.COM service of
 * VASCO Data Security.
 *
 * For more information about MYDIGIPASS.COM go to https://mydigipass.com
 * To create a free account in the sandbox environment, go to
 * https://developer.mydigipass.com
 */

/**
 * Implements hook_menu().
 */
function mydigipass_menu() {
  $items = array();

  $items['admin/settings/mydigipass'] = array(
    'title' => 'MYDIGIPASS.COM',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_admin_settings'),
    'description' => 'Configure MYDIGIPASS.COM settings',
    'access arguments' => array('administer mydigipass'),
    'file' => 'mydigipass.admin.inc.php',
  );

  $items['admin/settings/mydigipass/account_settings'] = array(
    'title' => 'Account settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/settings/mydigipass/user_data_fields'] = array(
    'title' => 'User data fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_admin_settings_user_profile_fields_form'),
    'description' => "Configure the MYDIGIPASS.COM user data fields which are shown in the user's profile",
    'access arguments' => array('administer mydigipass'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mydigipass.admin.inc.php',
  );

  $items['admin/settings/mydigipass/button_style'] = array(
    'title' => 'Button style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_admin_settings_button_style_form'),
    'description' => 'Configure the MYDIGIPASS.COM buttons which are shown in different forms',
    'access arguments' => array('administer mydigipass'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mydigipass.admin.inc.php',
  );

  $items['mydigipass/callback'] = array(
    'title' => 'MYDIGIPASS.COM callback',
    'page callback' => 'mydigipass_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'callback.inc.php',
  );

  $items['mydigipass/link'] = array(
    'title' => 'Link MYDIGIPASS.COM account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_link_user_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mydigipass/link/new_user'] = array(
    'title' => 'Create new account',
    'page callback' => 'mydigipass_link_new_user',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mydigipass/link/existing_user'] = array(
    'title' => 'Register new user',
    'page callback' => 'mydigipass_link_existing_user',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function mydigipass_perm() {
  return array('administer mydigipass');
}

/**
 * Implements hook_init().
 *
 * It is necessary to add the javascript using hook_init() and not with
 * drupal_add_js() since the javascript is a javascript file which has to be
 * loaded from a third party website.
 */
function mydigipass_init() {
  $endpoint = _mydigipass_get_endpoint_url('dp_connect.js');
  if (!empty($endpoint)) {
    drupal_set_html_head('<script type="text/javascript" src="' . $endpoint . '"></script>');
  }
}

/**
 * Implements hook_form_alter().
 */
function mydigipass_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    // The standard login form.
    case 'user_login_block':
    case 'user_login':
      // Add the MYDIGIPASS.COM button.
      $form['account']['mydigipass'] = array(
        '#type' => 'item',
        '#value' => l(t('Connect with MYDIGIPASS.COM'), '', array(
          'fragment' => ' ',
          'external' => TRUE,
          'attributes' => array(
            'class' => 'dpplus-connect',
            'data-client-id' => variable_get('mydigipass_client_id', ''),
            'data-redirect-uri' => variable_get('mydigipass_callback_url', url('mydigipass/callback', array('absolute' => TRUE))),
            'data-style' => variable_get('mydigipass_login_form_style', 'default'),
            'data-text' => variable_get('mydigipass_login_form_text', 'secure-login'),
            'data-help' => variable_get('mydigipass_login_form_help', 'true'),
          ),
        )),
      );
      // Add mydigipass_enforce_authentication_mode_during_login as first
      // validation handler.
      array_unshift($form['#validate'], 'mydigipass_enforce_authentication_mode_during_login');
      break;

    // The form which allows to reset your password.
    case 'user_pass':
      // Add mydigipass_enforce_authentication_mode_during_password_reset as
      // first validation handler.
      array_unshift($form['#validate'], 'mydigipass_enforce_authentication_mode_during_password_reset');
      break;

    // The standard user registration form.
    case 'user_register':
      $form['mydigipass'] = array(
        '#type' => 'item',
        '#value' => l(t('Connect with MYDIGIPASS.COM'), '', array(
          'fragment' => ' ',
          'external' => TRUE,
          'attributes' => array(
            'class' => 'dpplus-connect',
            'data-client-id' => variable_get('mydigipass_client_id', ''),
            'data-redirect-uri' => variable_get('mydigipass_callback_url', url('mydigipass/callback', array('absolute' => TRUE))),
            'data-state' => 'register',
            'data-style' => variable_get('mydigipass_register_form_style', 'large'),
            'data-text' => variable_get('mydigipass_register_form_text', 'sign-up'),
            'data-help' => variable_get('mydigipass_login_form_help', 'true'),
          ),
        )),
      );
      break;

    // The form shown on the mydigipass link page when the end-user indicated
    // that he/she already had a Drupal account.
    case 'mydigipass_user_login':
      // Change the text on the submit button.
      $form['submit']['#value'] = t('Link to account');

      // Add a submit handler which links the MYDIGIPASS.COM account to the
      // logged on user. f authentication fails, the submit handler will not be
      // called since the request will be stopped by the validation handler(s).
      $form['#submit'][] = 'mydigipass_link_user_to_logged_on_user';
      break;

    // The form shown on the mydigipass link page when the end-user indicated
    // that he wants to create a new Drupal account.
    case 'mydigipass_user_register':
      // Fill in the email address received from MYDIGIPASS.COM
      $uuid = $_SESSION['mydigipass_uuid'];
      $sql = "SELECT attribute_value FROM {mydigipass_user_data} "
        . "WHERE mdp_uuid = '%s' AND attribute_key = 'email'";
      $mdp_email = db_result(db_query($sql, $uuid));
      $form['mail']['#default_value'] = check_plain($mdp_email);
      $form['name']['#default_value'] = check_plain($mdp_email);
      // The value of the password doesn't really matter since a random
      // password is created and stored when the user is effectively created.
      $form['pass']['#type'] = 'value';

      // Change the text on the submit button.
      $form['submit']['#value'] = t('Create new account and link to MYDIGIPASS.COM');

      // Add a submit handler which creates a new user and links the
      // MYDIGIPASS.COM account this new user.
      // If authentication fails, the submit handler will not be called since
      // the request will be stopped by the validation handler(s).
      $form['#submit'][] = 'mydigipass_link_user_to_new_user';
      break;
  }
}

/**
 * Implements hook_forms().
 */
function mydigipass_forms() {
  // mydigipass_user_login is a slightly modified user_login form.
  $forms['mydigipass_user_login']['callback'] = 'user_login';
  // mydigipass_user_register is a slightly modified user_register form.
  $forms['mydigipass_user_register']['callback'] = 'user_register';

  return $forms;
}

/**
 * Implements hook_user().
 */
function mydigipass_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'view':
      // Check if the user is linked to a MYDIGIPASS.COM account.
      $sql = 'SELECT 1 FROM {mydigipass_user_link} WHERE drupal_uid = %d';
      $result = db_result(db_query($sql, $account->uid));
      if ($result == 1) {
        // The user is linked to a MYDIGIPASS.COM account, so extract the email
        // address of the MYDIGIPASS.COM account.
        $sql = "SELECT UD.attribute_value FROM {mydigipass_user_link} UL, {mydigipass_user_data} UD WHERE UL.drupal_uid = %d AND UL.mdp_uuid = UD.mdp_uuid AND UD.attribute_key = 'email'";
        $mdp_email = db_result(db_query($sql, $account->uid));
        $account->content['summary']['mydigipass'] = array(
          '#type' => 'user_profile_item',
          '#title' => 'MYDIGIPASS.COM',
          '#value' => t('This user account is linked to the following MYDIGIPASS.COM account: @mdp_email', array('@mdp_email' => $mdp_email)),
        );

        // Add the known MYDIGIPASS.COM user data of which the administrator
        // allowed it to be shown.
        $account->content['mydigipass_user_data'] = array(
          '#type' => 'user_profile_category',
          '#title' => t('MYDIGIPASS.COM user data'),
          '#description' => t('This data is information which was obtained from MYDIGIPASS.COM.'),
        );
        $sql = "SELECT * FROM {mydigipass_user_link} UL, {mydigipass_user_data} UD WHERE UL.drupal_uid = %d AND UL.mdp_uuid = UD.mdp_uuid AND UD.attribute_key IN (SELECT name FROM {mydigipass_profile_fields}) ORDER BY UD.attribute_key";
        $result = db_query($sql, $account->uid);

        while ($row = db_fetch_object($result)) {
          $account->content['mydigipass_user_data'][$row->attribute_key] = array(
            '#type' => 'user_profile_item',
            '#title' => t($row->attribute_key),
            '#value' => check_plain($row->attribute_value),
            '#attributes' => array('class' => 'profile-' . check_plain($row->attribute_key)),
          );
        }
      }
      else {
        $account->content['summary']['mydigipass'] = array(
          '#type' => 'user_profile_item',
          '#title' => 'MYDIGIPASS.COM',
          '#value' => t('This user account is not yet linked to a MYDIGIPASS.COM account'),
        );
      }
      break;

    case 'form':
      return mydigipass_form_profile($edit, $account);
      break;

    case 'delete':
      // A user account is being deleted. The personal data and the link with
      // MYDIGIPASS.COM should also be deleted.
      // Lookup the MYDIGIPASS.COM uuid which is associated with the user.
      $sql = "SELECT mdp_uuid FROM {mydigipass_user_link} WHERE drupal_uid = %d";
      $uuid = db_result(db_query($sql, $account->uid));

      // Delete the link between the Drupal user and the MYDIGIPASS.COM user.
      $sql = "DELETE FROM {mydigipass_user_link} WHERE mdp_uuid = '%s'";
      db_query($sql, $uuid);

      // Delete the personal data of the MYDIGIPASS.COM user.
      $sql = "DELETE FROM {mydigipass_user_data} WHERE mdp_uuid = '%s'";
      db_query($sql, $uuid);

      break;

    case 'login':
      // Check if this site is configured in "MYDIGIPASS.COM only" mode. If so,
      // it is important to check if the MYDIGIPASS.COM uuid has been set in the
      // current session. If so, then this indicates that the user has already
      // been authenticated by MYDIGIPASS.COM. If the uuid is not yet set in the
      // session, then the user tries to authenticate via some other means which
      // is not allowed. An occasion in which this may occur is if the user
      // received an email with a one-time login URL.
      if (variable_get('mydigipass_authentication_mode', 'mdp_only') == 'mdp_only') {
        $sql = "SELECT 1 FROM {mydigipass_user_link} UL WHERE UL.drupal_uid = %d";
        $result = db_result(db_query($sql, $account->uid));

        if (($result == 1) && empty($_SESSION['mydigipass_uuid'])) {
          global $user;
          // Load the anonymous user.
          $user = drupal_anonymous_user();
          drupal_set_message(t("This user account has been linked to a MYDIGIPASS.COM account. According to this website's policy, an account linked to MYDIGIPASS.COM can only logon via MYDIGIPASS.COM."), 'error');
          watchdog('mydigipass', 'The session for user %uid has been destroyed since the user managed to logon by not using MYDIGIPASS.COM.', array('%uid' => $account->uid), WATCHDOG_ERROR);
          // Redirect the user to the front-page. If this is not done, the user
          // can receive an access denied page in some cases (e.g. when using a
          // one-time login.
          drupal_goto('<front>');
        }
      }
      break;
  }
}

/**
 * Form validation handler for mydigipass_user_register().
 *
 * This validation handler is executed when a user creates a new Drupal user
 * using the form which is shown on 'mydigipass/link/new_user'. This function
 * validates whether the entered email address is the same as the one which was
 */
function mydigipass_register_user_validate_email($form, &$form_state) {
  $uuid = $_SESSION['mydigipass_uuid'];
  $sql = "SELECT attribute_value FROM {mydigipass_user_data} WHERE mdp_uuid = '%s' AND attribute_key = 'email'";
  $mdp_email = db_result(db_query($sql, $uuid));
  if ($form_state['values']['mail'] != $mdp_email) {
    form_set_error('mail', t('The email address registered at MYDIGIPASS.COM is %mail. You have to register using the same email address at this website.', array('%mail' => $mdp_email)));
  }
}

/**
 * Form validation handler to enforce the authentication mode during login.
 *
 * Form validation handler of the login form which enforces the authentication
 * mode. If the authentication mode is set to mdp_only and the account is
 * linked to MYDIGIPASS.COM then logon is denied.
 */
function mydigipass_enforce_authentication_mode_during_login($form, &$form_state) {
  if (variable_get('mydigipass_authentication_mode', 'mdp_only') == 'mdp_only') {
    $sql = "SELECT 1 FROM {mydigipass_user_link} UL, {users} U WHERE U.uid = UL.drupal_uid AND U.name = '%s'";
    $result = db_result(db_query($sql, $form_state['values']['name']));

    if ($result == 1) {
      form_set_error('name', t("This user account has been linked to a MYDIGIPASS.COM account. According to this website's policy, an account linked to MYDIGIPASS.COM can only logon via MYDIGIPASS.COM."));
    }
  }
}

/**
 * Form validation handler for user_pass().
 *
 * Form validation handler of the password reset form which enforces the
 * authentication mode. If the authentication mode is set to mdp_only and the
 * account is linked to MYDIGIPASS.COM then resetting the user's password is
 * denied.
 */
function mydigipass_enforce_authentication_mode_during_password_reset($form, &$form_state) {
  if (variable_get('mydigipass_authentication_mode', 'mdp_only') == 'mdp_only') {
    $sql = "SELECT 1 FROM {mydigipass_user_link} UL, {users} U WHERE U.uid = UL.drupal_uid AND (U.name = '%s' OR U.mail = '%s')";
    $result = db_result(db_query($sql, trim($form_state['values']['name']), trim($form_state['values']['name'])));

    if ($result == 1) {
      form_set_error('name', t("This user account has been linked to a MYDIGIPASS.COM account. According to this website's policy, an account linked to MYDIGIPASS.COM can only logon via MYDIGIPASS.COM. As such you cannot use the password reset functionality."));
    }
  }
}

/**
 * Form submit handler which links an existing user to a MYDIGIPASS.COM user.
 *
 * Form submit handler which is called after the mydigipass_user_login
 * form. The validation handlers of the form will ensure that the user object
 * is loaded. This submit handler performs the actual linking.
 */
function mydigipass_link_user_to_logged_on_user($form, &$form_state) {
  global $user;
  $uuid = $_SESSION['mydigipass_uuid'];
  // Link the Drupal user to the MYDIGIPASS.COM user.
  $sql = "INSERT INTO {mydigipass_user_link} (drupal_uid, mdp_uuid) VALUES (%d, '%s')";
  $success = db_query($sql, $user->uid, $uuid);

  if ($success) {
    drupal_set_message(t('The user has been successfully linked to MYDIGIPASS.COM.'));
  }
  else {
    drupal_set_message(t('An error occured while linking the user to MYDIGIPASS.COM.', 'error'));
  }
}

/**
 * Creates a new user and links it to a MYDIGIPASS.COM user.
 *
 * Form submit handler which is called after the mydigipass_user_register
 * form. This submit handler creates a new user and links this user to the
 * MYDIGIPASS.COM user. The new user is created with a random password.
 */
function mydigipass_link_user_to_new_user($form, &$form_state) {
  global $user;

  $new_username = $form_state['values']['name'];

  // Register the new user.
  user_external_login_register($new_username, 'mydigipass');

  // user_external_login_register() creates a new account, but only sets the
  // name of the user. The email address should also be set.
  $uuid = $_SESSION['mydigipass_uuid'];
  $sql = "SELECT attribute_value FROM {mydigipass_user_data} WHERE mdp_uuid = '%s' AND attribute_key = 'email'";
  $mail = db_result(db_query($sql, $uuid));
  $sql = "UPDATE {users} SET mail = '%s', init = '%s' WHERE uid = %d";
  db_query($sql, $form_state['values']['mail'], $mail, $user->uid);
  // Also store the email in the $user object.
  $user->mail = $form_state['values']['mail'];

  // Link the new user to MYDIGIPASS.COM
  mydigipass_link_user_to_logged_on_user($form, $form_state);

  // Check whether administrator approval is needed.
  if (variable_get('user_register', 1) == 1) {
    $registered_user = $user;
    // Reset the $user object. user_external_login() behaves strangely
    // if this isn't done, even if $user->uid is set to 0.
    $user = drupal_anonymous_user();
    // The following statement will restore $user.
    user_external_login($registered_user);

    drupal_set_message(t('Registration successful. You are now logged in.'));

    drupal_goto('<front>');
  }
  else {
    // user_external_login_register() automatically sets the account status
    // to 'enabled'. However, the administrator wants to approve accounts
    // first. So disable the account.
    $sql = "UPDATE {users} SET status = 0 WHERE uid = %d";
    db_query($sql, $user->uid);

    // Administrator approval required.
    _user_mail_notify('register_pending_approval', $user);
    drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'));
    $form_state['redirect'] = '';

    // Reset the $user object.
    $user = drupal_anonymous_user();
  }
}

/**
 * Generates the form items which are added when editing a user account.
 *
 * This function generates the different form items which are added to the form
 * which is displayed when a user is edited. It behaves as follows: when the
 * user is linked to MYDIGIPASS.COM, then it shows a button which allows
 * unlinking. When the user is not yet linked, a MYDIGIPASS.COM button is shown
 * which allows to link to MYDIGIPASS.COM.
 */
function mydigipass_form_profile($edit, $account) {
  $form = array();
  $form['mydigipass'] = array(
    '#type' => 'fieldset',
    '#title' => 'MYDIGIPASS.COM',
  );

  // Check if the user is linked to a MYDIGIPASS.COM account.
  $sql = 'SELECT 1 FROM {mydigipass_user_link} WHERE drupal_uid = %d';
  $result = db_result(db_query($sql, $account->uid));
  if ($result == 1) {
    // The user is linked with a MYDIGIPASS.COM account.
    $sql = "SELECT attribute_value FROM {mydigipass_user_link} UL, {mydigipass_user_data} UD WHERE UL.drupal_uid = %d AND UL.mdp_uuid = UD.mdp_uuid AND UD.attribute_key = 'email'";
    $mdp_email = db_result(db_query($sql, $account->uid));
    $form['mydigipass'][] = array(
      '#type' => 'item',
      '#title' => t('MYDIGIPASS.COM'),
      '#value' => t('This user account is linked to the following MYDIGIPASS.COM account: @mdp_email', array('@mdp_email' => $mdp_email)),
    );
    $form['mydigipass'][] = array(
      '#type' => 'submit',
      '#title' => t('Unlink from MYDIGIPASS.COM'),
      '#value' => t('Unlink'),
      '#description' => t('Use the following button to unlink your account from MYDIGIPASS.COM'),
      '#submit' => array('mydigipass_form_profile_unlink'),
    );

  }
  else {
    // The user is not yet linked with a MYDIGIPASS.COM account.
    // Only show the 'Link with MYDIGIPASS.COM'-button if the logged on user is
    // the same as the one who is viewing this profile. This to avoid that an
    // administrator would link his MYDIGIPASS.COM account by accident to
    // another Drupal user's profile.
    global $user;
    if ($user->uid == $account->uid) {
      $form['mydigipass'][] = array(
        '#type' => 'item',
        '#value' => t('Click on the button below to secure your account with MYDIGIPASS.COM.'),
      );

      // Generate a random 32-char string. This string will be used as value
      // for the state parameter and is stored in this user's session. This
      // allows to verify that the end-user effectivelity clicked the button to
      // link and will avoid that a CSRF-alike attack is being performed on a
      // logged-on end-user by a malicious person.
      $_SESSION['mydigipass_link_code'] = user_password(32);

      // The MYDIGIPASS.COM button also contains the data-state parameter.
      $form['mydigipass'][] = array(
        '#type' => 'item',
        '#value' => l(t('Connect with MYDIGIPASS.COM'), '', array(
          'fragment' => ' ',
          'external' => TRUE,
          'attributes' => array(
            'class' => 'dpplus-connect',
            'data-client-id' => variable_get('mydigipass_client_id', ''),
            'data-redirect-uri' => variable_get('mydigipass_callback_url', url('mydigipass/callback', array('absolute' => TRUE))),
            'data-state' => $_SESSION['mydigipass_link_code'],
            'data-style' => variable_get('mydigipass_link_form_style', 'large'),
            'data-text' => variable_get('mydigipass_link_form_text', 'connect'),
            'data-help' => variable_get('mydigipass_login_form_help', 'true'),
          ),
        )),
      );
    }
    else {
      // Somebody else than the user himself is viewing the user's profile.
      $form['mydigipass'][] = array(
        '#type' => 'item',
        '#value' => t('This user account is not linked to a MYDIGIPASS.COM account.'),
      );
    }
  }

  return $form;
}

/**
 * Removes the link between the current user and MYDIGIPASS.COM.
 *
 * Submit handler called from mydigipass_form_profile();
 */
function mydigipass_form_profile_unlink($form, &$form_state) {
  // Lookup the MYDIGIPASS.COM uuid which is associated with the user.
  $sql = "SELECT mdp_uuid FROM {mydigipass_user_link} WHERE drupal_uid = %d";
  $uuid = db_result(db_query($sql, $form_state['values']['_account']->uid));

  // Delete the link between the Drupal user and the MYDIGIPASS.COM user.
  $sql = "DELETE FROM {mydigipass_user_link} WHERE mdp_uuid = '%s'";
  $success = db_query($sql, $uuid);

  if ($success) {
    // Caring about user privacy! Delete all attributes which were saved in
    // the database.
    $sql = "DELETE FROM {mydigipass_user_data} WHERE mdp_uuid = '%s'";
    db_query($sql, $uuid);
    drupal_set_message(t('Your account has been successfully unlinked. You can no longer log in with MYDIGIPASS.COM.'));
  }
  else {
    drupal_set_message(t('An error occured while unlinking the account from MYDIGIPASS.COM', 'error'));
  }

}

/**
 * Private helper function which returns the URL of an endpoint.
 *
 * Return the URL of the token or data endpoint while taking into account the
 * environment which was selected on the admin page.
 *
 * @param string $endpoint
 *   The endpoint for which the URL is requested. Allowed values are
 *   'token_endpoint' and 'data_endpoint'.
 *
 * @return string
 *   The URL of the endpoint of an empty string is the environment is not yet
 *   selected or if the $endpoint value was wrong.
 */
function _mydigipass_get_endpoint_url($endpoint) {
  $environment = variable_get('mydigipass_environment', '');
  $base_url = ($environment == 'test' ? 'https://sandbox.mydigipass.com' : ($environment == 'production' ? 'https://mydigipass.com' : ''));

  // Check if the environment is not set (i.e. the module is not yet
  // configured) or if it is set to a wrong value.
  if (($environment == '') || ($base_url == '')) {
    return '';
  }

  switch ($endpoint) {
    case 'token_endpoint':
      return $base_url . '/oauth/token';
      break;

    case 'data_endpoint':
      return $base_url . '/oauth/user_data';
      break;

    case 'dp_connect.js':
      return $base_url .  '/dp_connect.js';
      break;
  }
  return '';
}

/**
 * Page callback for 'mydigipass/link'.
 *
 * Shows the first page of a wizard which allows a MYDIGIPASS.COM user to link
 * his/her MYDIGIPASS.COM account to a Drupal account.
 *
 * An end-user arrives on this page when after having authenticated at
 * MYDIGIPASS.COM and after having been redirected to the callback page. The
 * callback page detected that the MYDIGIPASS.COM was not yet linked to a
 * Drupal account and redirects the end-user to the "Link with MYDIGIPASS.COM"
 * wizard. The first page of this wizard allows the end-user to choose between
 * linking his MYDIGIPASS.COM account to an existing Drupal account or to
 * create a new Drupal account and link immediately to his/her MYDIGIPASS.COM
 * account.
 */
function mydigipass_link_user_form() {
  $form = array();

  $form[] = array(
    '#type' => 'item',
    '#value' => t("Your MYDIGIPASS.COM account is not yet linked to a user account on this website. If you already have a user account on this website, you can link it to your MYDIGIPASS.COM account. If you don't have a user account yet, create one and it will be linked to your MYDIGIPASS.COM account."),
  );

  $scenarios = array(
    'new_user' => t("I don't have a user account yet on this website. I want to create one and link it to my MYDIGIPASS.COM account."),
    'existing_user' => t("I already have a user account on this website. I want to link it to my MYDIGIPASS.COM account."),
  );

  $form['scenario'] = array(
    '#type' => 'radios',
    '#title' => t('Select one of the following options'),
    '#required' => TRUE,
    '#options' => $scenarios,
  );

  $form[] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

/**
 * Submit handler of the first page in the wizard to link a user.
 *
 * The submit handler only evaluates the end-user's choice:
 *  - If the end-user chose to create a new user, then he/she is redirected
 *    to mydigipass/link/new_user.
 *  - Otherwise the user already has an account and is therefore redirected
 *    to mydigipass/link/existing_user.
 */
function mydigipass_link_user_form_submit($form, &$form_state) {
  if ($form_state['values']['scenario'] == 'new_user') {
    drupal_goto('mydigipass/link/new_user');
  }
  else {
    drupal_goto('mydigipass/link/existing_user');
  }
}

/**
 * Second page in the wizard to link a Drupal user to MYDIGIPASS.COM.
 *
 * This function checks whether it is allowed to create new user accounts on
 * the website. If not, then an error message is returned. If it is allowed,
 * then a form which resembles the user registration form is returned.
 * Using hook_form_alter an additional submit handler is added to the form
 * which causes that the newly created user is linked to the MYDIGIPASS.COM
 * account.
 *
 * @see mydigipass_forms()
 * @see mydigipass_form_alter()
 */
function mydigipass_link_new_user() {
  if (user_register_access()) {
    $output = t('Complete this form to create a new account on this website to link it to your MYDIGIPASS.COM account.');
    $output .= drupal_get_form('mydigipass_user_register');
  }
  else {
    $output = t("According to this website's policy it is not allowed to create new accounts.");
  }

  return $output;
}

/**
 * Second page in the wizard to link a Drupal user to MYDIGIPASS.COM.
 *
 * This function returns a form which resembles the user login form.
 * Using hook_form_alter an additional submit handler is added to the form
 * which causes that the existing  user is linked to the MYDIGIPASS.COM
 * account.
 *
 * @see mydigipass_forms()
 * @see mydigipass_form_alter()
 */
function mydigipass_link_existing_user() {
  $output = t('Complete this form if you already have an account on this website. Enter your credentials to link this account to MYDIGIPASS.COM. As soon as your account is linked, you will be able to log in to this site with your MYDIGIPASS.COM authenticator.');
  $output .= drupal_get_form('mydigipass_user_login');

  return $output;
}
